#!/bin/sh

# Prints the git commands we run, for learning
giti() {
  echo "git $*"
  git "$@"
}

usage() {
  echo "\
usage: git ohshit <subcommand>

The subcommands are:
branch <branch> [n]   make the last n commits on <branch> instead of the current branch
commit [n]            undo the last n commits
fuck                  HARD reset current branch to remote branch
merge                 undo the last merge
push [n] [--force]    undo the last n commits before a push, then re-push [force]
rebase                undo the last rebase
reset [n]             undo the last reset or n actions (from reflog)"
}

# Test if last_action contains search string
test_() {
  [ "${reflog_action#*$1}" != "$reflog_action" ]
}

test_rebase() {
  [ -d "${repo_root}/.git/rebase-apply" ] ||
  [ -d "${repo_root}/.git/rebase-merge" ]
}

branch() {
  if [ -z "$1" ]; then
    echo "Need to specify branch name to commit to"
    return 1
  fi

  commits=${2:-1}

  giti branch "$1" || return $?
  giti reset --hard HEAD~"${commits}" || return $?
  giti checkout "$1"
}

commit() {
  commits=${1:-1}

  giti reset --soft HEAD~"${commits}"
}

fuck() {
  giti fetch || return $?
  giti reset --hard "@{upstream}" || return $?
  giti clean -ffdqx
}

merge() {
  giti reset --merge ORIG_HEAD
}

push() {
  commits=${1:-1}

  case $2 in
    -f|--force|force)
      giti reset --hard HEAD~"${commits}" || return $?
      giti push -f
      ;;
    *)
      giti revert --no-commit HEAD~"${commits}".. || return $?
      giti revert --continue || return $?
      giti push
      ;;
  esac
}

rebase() {
  if test_rebase; then
    giti rebase --abort
  elif test_ "rebase"; then
    giti reset --hard ORIG_HEAD
  else
    echo "No rebase in progress or just completed"
    return 2
  fi
}

reset() {
  refs=${1:-1}

  giti reset --hard "HEAD@{${refs}}"
}

ohshit() {
  # Check if there is anything obvious to undo
  if test_ "commit"; then
    commit
  elif test_ "merge"; then
    merge
  elif test_ "rebase" || test_rebase; then
    rebase
  elif test_ "reset"; then
    reset
  else
    echo "Failed to detect correct action to fix"
    usage
    return 3
  fi
}

main() {
  subcommand="$1"
  shift

  reflog_action="$(git log -g --pretty=format:"%gs" -1)"
  repo_root="$(git rev-parse --show-toplevel)"

  if [ -z "$subcommand" ]; then
    ohshit
  else
    case $subcommand in
      "-h"|"--help")
        usage
        ;;
      branch)
        branch "$@"
        ;;
      commit)
        commit "$@"
        ;;
      fuck)
        fuck
        ;;
      merge)
        merge
        ;;
      push)
        push "$@"
        ;;
      rebase)
        rebase
        ;;
      reset)
        reset "$@"
        ;;
      *)
        echo "git ohshit: '$subcommand' is not an ohshit command. See 'git ohshit --help'"
        return 1
        ;;
    esac
  fi
}

main "$@"
